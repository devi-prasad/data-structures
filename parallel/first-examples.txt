Informal reasoning about parallel algorithms.

(1)
Operation == Boolean AND operation

Model == ERCW with ACR

input: array A[1..n] of boolean values
output: boolean AND of the array elements, stored in a variable named 'result'.

1  begin
2     result = true
3     for i = 1 to n do in parallel
4       if A[i] == false then
5         result = false
6       end if
7     end parallel
8  end

With O(n) processes this takes O(1) time.

Initially, the reesult variable is set to true.

If the result of ANDing is true, nothing is updated.

If any one element is false, then the result varianble shoule be set to false.
In that case, an arbitrary conflict resolution model will produce the correct
answer.


(2)
Operation == Boolean AND operation

Model == ERCW with ECR

input: array A[1..n] of boolean values.
output: boolean AND of the array elements, stored in a variable named 'result'.

1  begin
2    result = false
3    for i = 1 to n do in parallel
4      result = A[i]
5    end parallel
6  end

Why does this algorithm fail if ACR is used instead of ECR?


(3) 
Operation == Boolean AND operation

Model == EREW.

This is a very strict model of execution. Since writing is exclusive, no two
processors are allowed to write to a shared location. The result variable is
shared and cannot be concurrently written.

The trick is to reduce the size of the problem in half each step, achieving
the time complexity of O(log n).

input: array A[1..n] of boolean values
output: boolean AND of the array elements, stored in a variable named 'result'.

#
1  begin
2    p = n/2
##
3    while p > 0 do
4        for i = 1 to p do in parallel
5           A[i] = A[2i] & A[2i - 1]
6        end parallel
7        p = p/2
8    end while
##
9    result = A[1]
10 end
#


(4)
Operation == Scalar Product of Two Vectrors

Let a = [a1, a2, ..., an] and b = [b1, b2, ..., bn] be two vectors.
Their scalar product is expressed as 
    c = a1 * b1 + a2 * b2 + ... + an * bn

Vectors a and b are stored in shared memory.

The computed value (a * b) is to be stored in a variable c1.

#
input:  arrays a[1..n] and b[1..n]
output: The value of scalar product of a and b stored in variable c{1}

#
1  begin
2    for i = 1 to n do in parallel
3      c{i} = a{i} * b{i}
4    end parallel
##
5    p = n/2
##
6    while p > 0 do
7      for i = 1 to p do in parallel
8        c{i} = c{i} + c{i + p}
9      end parallel
10     p = p/2
11   end while
12 end
#

Lines 2-4 take O(1) time using n processors.
Lines 5-10 compute the sum of the elements of an array.

The entire algorithm therefore can be implemented on a EREW PRAM in 
O(log n) time, using O(n) processors.

